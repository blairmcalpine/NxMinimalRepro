{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["jestConfig"],
  "description": "@nx/jest:jest configuration options. (https://nx.dev/nx-api/jest/executors/jest#nxjestjest)",
  "properties": {
    "bail": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "number"
        }
      ],
      "description": "Exit the test suite immediately after n number of failing tests. (https://jestjs.io/docs/cli#--bail)"
    },
    "changedSince": {
      "type": "string",
      "description": "Runs tests related to the changes since the provided branch or commit hash. If the current branch has diverged from the given branch, then only changes made locally will be tested. (https://jestjs.io/docs/cli#--changedsince)"
    },
    "ci": {
      "type": "boolean",
      "description": "Whether to run Jest in continuous integration (CI) mode. This option is on by default in most popular CI environments. It will prevent snapshots from being written unless explicitly requested. (https://jestjs.io/docs/cli#--ci)"
    },
    "clearCache": {
      "type": "boolean",
      "description": "Deletes the Jest cache directory and then exits without running tests. Will delete Jest's default cache directory. Note: clearing the cache will reduce performance."
    },
    "codeCoverage": {
      "type": "boolean",
      "description": "Indicates that test coverage information should be collected and reported in the output. (https://jestjs.io/docs/cli#--coverageboolean)"
    },
    "color": {
      "type": "boolean",
      "description": "Forces test results output color highlighting (even if stdout is not a TTY). Set to false if you would like to have no colors. (https://jestjs.io/docs/cli#--colors)"
    },
    "colors": {
      "type": "boolean",
      "description": "Forces test results output highlighting even if stdout is not a TTY. (https://jestjs.io/docs/cli#--colors)"
    },
    "config": {
      "type": "string",
      "description": "The path to a Jest config file specifying how to find and execute tests. If no rootDir is set in the config, the directory containing the config file is assumed to be the rootDir for the project. This can also be a JSON-encoded value which Jest will use as configuration."
    },
    "coverageReporters": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "A list of reporter names that Jest uses when writing coverage reports. Any istanbul reporter."
    },
    "coverageDirectory": {
      "type": "string",
      "description": "The directory where Jest should output its coverage files."
    },
    "detectLeaks": {
      "type": "boolean",
      "description": "EXPERIMENTAL: Detect memory leaks in tests. After executing a test, it will try to garbage collect the global object used, and fail if it was leaked"
    },
    "detectOpenHandles": {
      "type": "boolean",
      "description": "Attempt to collect and print open handles preventing Jest from exiting cleanly (https://jestjs.io/docs/cli#--detectopenhandles)"
    },
    "findRelatedTests": {
      "type": "boolean",
      "description": "Find and run the tests that cover a comma separated list of source files that were passed in as arguments. (https://jestjs.io/docs/cli#--findrelatedtests-spaceseparatedlistofsourcefiles)"
    },
    "forceExit": {
      "type": "boolean",
      "description": "Force Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up. This feature is an escape-hatch. If Jest doesn't exit at the end of a test run, it means external resources are still being held on to or timers are still pending in your code. It is advised to tear down external resources after each test to make sure Jest can shut down cleanly. You can use --detectOpenHandles to help track it down."
    },
    "jestConfig": {
      "type": "string",
      "description": "The path of the Jest configuration. (https://jestjs.io/docs/en/configuration)"
    },
    "json": {
      "type": "boolean",
      "description": "Prints the test results in JSON. This mode will send all other test output and user messages to stderr. (https://jestjs.io/docs/cli#--json)"
    },
    "logHeapUsage": {
      "type": "boolean",
      "description": "Logs the heap usage after every test. Useful to debug memory leaks. Use together with --runInBand and --expose-gc in node."
    },
    "maxWorkers": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ],
      "description": "Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. Useful for CI. (its usually best not to override this default) (https://jestjs.io/docs/cli#--maxworkersnumstring)"
    },
    "onlyChanged": {
      "type": "boolean",
      "description": "Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git or hg repository at the moment. (https://jestjs.io/docs/cli#--onlychanged)"
    },
    "outputFile": {
      "type": "string",
      "description": "Write test results to a file when the --json option is also specified. (https://jestjs.io/docs/cli#--outputfilefilename)"
    },
    "passWithNoTests": {
      "type": "boolean",
      "description": "Will not fail if no tests are found (for example while using --testPathPattern.) (https://jestjs.io/docs/cli#--passwithnotests)"
    },
    "randomize": {
      "type": "boolean",
      "description": "Shuffle the order of the tests within a file. The shuffling is based on the seed. This option is only supported using the default jest-circus test runner."
    },
    "reporters": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Run tests with specified reporters. Reporter options are not available via CLI. Example with multiple reporters: jest --reporters='default' --reporters='jest-junit'. (https://jestjs.io/docs/cli#--reporters)"
    },
    "runInBand": {
      "type": "boolean",
      "description": "Run all tests serially in the current process (rather than creating a worker pool of child processes that run tests). This is sometimes useful for debugging, but such use cases are pretty rare. Useful for CI. (https://jestjs.io/docs/cli#--runinband)"
    },
    "showConfig": {
      "type": "boolean",
      "description": "Print your Jest config and then exits. (https://jestjs.io/docs/en/cli#--showconfig)"
    },
    "silent": {
      "type": "boolean",
      "description": "Prevent tests from printing messages through the console. (https://jestjs.io/docs/cli#--silent)"
    },
    "testFile": {
      "type": "string",
      "description": "The name of the file to test."
    },
    "testLocationInResults": {
      "type": "boolean",
      "description": "Adds a location field to test results. Used to report location of a test in a reporter. { 'column': 4, 'line': 5 } (https://jestjs.io/docs/cli#--testlocationinresults)"
    },
    "testNamePattern": {
      "type": "string",
      "description": "Run only tests with a name that matches the regex pattern. (https://jestjs.io/docs/cli#--testnamepatternregex)"
    },
    "testPathIgnorePatterns": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "An array of regexp pattern strings that is matched against all tests paths before executing the test. Only run those tests with a path that does not match with the provided regexp expressions. (https://jestjs.io/docs/cli#--testpathignorepatternsregexarray)"
    },
    "testPathPattern": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "An array of regexp pattern strings that is matched against all tests paths before executing the test. (https://jestjs.io/docs/cli#--testpathpatternregex)"
    },
    "testTimeout": {
      "type": "number",
      "description": "Default timeout of a test in milliseconds. Default value: 5000. (https://jestjs.io/docs/cli#--testtimeoutnumber)"
    },
    "testResultsProcessor": {
      "type": "string",
      "description": "Node module that implements a custom results processor. (https://jestjs.io/docs/en/configuration#testresultsprocessor-string)"
    },
    "updateSnapshot": {
      "type": "boolean",
      "description": "Use this flag to re-record snapshots. Can be used together with a test suite pattern or with --testNamePattern to re-record snapshot for test matching the pattern. (https://jestjs.io/docs/cli#--updatesnapshot)"
    },
    "useStderr": {
      "type": "boolean",
      "description": "Divert all output to stderr."
    },
    "verbose": {
      "type": "boolean",
      "description": "Display individual test results with the test suite hierarchy. (https://jestjs.io/docs/cli#--verbose)"
    },
    "watch": {
      "type": "boolean",
      "description": "Watch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the --watchAll option. (https://jestjs.io/docs/cli#--watch)"
    },
    "watchAll": {
      "type": "boolean",
      "description": "Watch files for changes and rerun all tests when something changes. If you want to re-run only the tests that depend on the changed files, use the --watch option. (https://jestjs.io/docs/cli#--watchall)"
    }
  }
}
